generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String   @id @default(uuid())
    name         String
    email        String   @unique
    passwordHash String
    role         Role     @default(user)
    avatarUrl    String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    courses      Course[]      @relation("CreatedCourses")
    purchases    Purchase[]
    progress     Progress[]
    quizResults  QuizResult[]
    certificates Certificate[]
}

model Course {
    id            String   @id @default(uuid())
    title         String
    description   String
    price         Decimal  @db.Decimal(10, 2)
    thumbnailUrl  String?
    level         Level
    durationHours Int
    createdBy     String
    isPublished   Boolean
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    creator      User          @relation(fields: [createdBy], references: [id], name: "CreatedCourses")
    modules      Module[]
    purchases    Purchase[]
    quizzes      Quiz[]
    quizResults  QuizResult[]
    certificates Certificate[]
}

model Module {
    id              String   @id @default(uuid())
    courseId        String
    title           String
    description     String
    videoUrl        String
    durationMinutes Int
    order           Int
    isFree          Boolean
    createdAt       DateTime @default(now())

    course   Course     @relation(fields: [courseId], references: [id])
    progress Progress[]
}

model Purchase {
    id            String         @id @default(uuid())
    userId        String
    courseId      String
    amount        Decimal        @db.Decimal(10, 2)
    paymentMethod String
    status        PurchaseStatus
    transactionId String
    createdAt     DateTime       @default(now())

    user   User   @relation(fields: [userId], references: [id])
    course Course @relation(fields: [courseId], references: [id])
}

model Progress {
    id               String    @id @default(uuid())
    userId           String
    moduleId         String
    completedAt      DateTime?
    watchTimeSeconds Int

    user   User   @relation(fields: [userId], references: [id])
    module Module @relation(fields: [moduleId], references: [id])
}

model Quiz {
    id            String @id @default(uuid())
    courseId      String
    title         String
    question      String
    options       Json
    correctAnswer String
    points        Int
    order         Int

    course Course @relation(fields: [courseId], references: [id])
}

model QuizResult {
    id             String   @id @default(uuid())
    userId         String
    courseId       String
    score          Int
    totalQuestions Int
    passed         Boolean
    answers        Json
    takenAt        DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id])
    course Course @relation(fields: [courseId], references: [id])
}

model Certificate {
    id                String   @id @default(uuid())
    userId            String
    courseId          String
    certificateNumber String   @unique
    fileUrl           String
    issuedAt          DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id])
    course Course @relation(fields: [courseId], references: [id])
}

enum Role {
    user
    admin
}

enum Level {
    beginner
    intermediate
    advanced
}

enum PurchaseStatus {
    pending
    completed
    failed
    refunded
}
